# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{
          github.ref }} | cut -f1)"
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
    container:
      image: jsii/superchain:1-buster-slim
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist\releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist\changelog.md -t $(cat dist\releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-npm
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    container:
      image: jsii/superchain:1-buster-slim-node14
  release_pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
    container:
      image: jsii/superchain:1-buster-slim-node14
  upload:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/checkout@v2
        name: checkout
      - name: Show GitHub ref
        run: echo "$GITHUB_REF"
      - name: Get the version
        id: get_version
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - run: cd ./flywayjar
      - uses: actions/checkout@v2
        name: checkout2
      - run: gradle build && gradle buildZip
        working-directory: ./flywayjar
      - uses: actions/upload-artifact@v1
        with:
          name: upload change
          path: ./flywayjar
      - name: donwload
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: run upload !
        run: export AWS_EC2_METADATA_DISABLED=true && mkdir ./temp && cp
          ./flywayjar/build/distributions/flywayjar-1.0.0.zip
          ./temp/flywayjar.$(cat dist/version.txt).zip && aws s3 sync ./temp/
          s3://flywaymigrationconstruct-monocdk
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
